#!/bin/bash
action=$1
available_actions=(build version clean build-phi build-user-tools build-android-odroid load-module remove-module)

if [ "$action" == "" ]; then
	action_str=$( echo ${available_actions[*]} | tr ' ' '|' )
	echo "Usage: pmctrack-manager [${action_str}]" >&2
	exit 0	
fi

if [ "${PMCTRACK_ROOT}" == "" ]; then
	echo "PMCTRACK_ROOT enviroment value not defined" >&2
	exit 1
fi

if [ ! -d "${PMCTRACK_ROOT}" ]; then
	echo "PMCTRACK_ROOT directory not found: ${PMCTRACK_ROOT}" >&2
	exit 1
fi

## Process version command
function do_version(){
	if [ ! -f "${PMCTRACK_ROOT}/etc/version" ]; then
			echo "Can't find file ${PMCTRACK_ROOT}/etc/version" >&2
			exit 1
	fi		
	echo "PMCTrack version ::" `cat "${PMCTRACK_ROOT}"/etc/version`
	exit 0
}


function arch_bitwidth(){
	machine_arch=`uname -m`

	case ${machine_arch} in
		x86_64|aarch64) return 64 ;;
		armv7l|i386|i686|i486)	return 32 ;;
		*) return 0 ;;
	esac
}

function print_vendor_string(){
	local id="$1"

	case $id in
		1*) printf "Intel"
			return 0 
			;; 
		2*) printf "AMD"
			return 0 
			;; 
		3*) printf "ARM"
			return 0 
			;; 
		*) 	printf "Unknown"
			return 0 
			;; 
	esac
}

function figure_out_vendor(){
	local vendor_id=`cat /proc/cpuinfo | grep vendor_id | head -n 1 | cut -d : -f 2 | cut -d ' ' -f 2`

	case $vendor_id in
		GenuineIntel) return 1;; ## Intel
		AuthenticAMD) return 2;; ## AMD
		*) ## It may as well be ARM
			machine_arch=`uname -m` 
			if [ "$machine_arch" == "armv7l" ] || [ "$machine_arch" == "aarch64" ]; then
				return 3 ## ARM
			else
				return 0
			fi
			;;
	esac
}


function figure_out_kernel_HZ_setting(){
	local default_hz=250
	figure_out_vendor

	local vendor=$?
	if [ $vendor -eq 3 ]; then
		default_hz=100
	fi

	config_file=/boot/config-`uname -r`

	if [ ! -f "$config_file" ]; then
		return ${default_hz}
	fi 

	## Retrieve the value of the CONFIG_HZ variable
	local str=$(grep 'CONFIG_HZ=' ${config_file} | cut -d '=' -f 2)
	
	if [ "$str" == "" ]; then
		## Not found in config file
		return ${default_hz}
	else 
		return $str
	fi
}


function update_compatible_modules(){
	local vendor_str=$1
	local bitw=$2

	grep 'CONFIG_PMCTRACK=y' /boot/config-$(uname -r)
	patched_kernel=$?	
	
	if [ "$FORCE_LEGACY" != "yes" ] && [ ${patched_kernel} -ne 0 ]; then
		compatible_modules=(perf)
		module_names=(mchw_perf)
	elif [ "$vendor_str" == "Intel" ]; then
		compatible_modules=(intel-core core2 perf)
		module_names=(mchw_intel_core mchw_core2 mchw_perf)
	elif [ "$vendor_str" == "AMD" ]; then
		compatible_modules=(amd perf)
		module_names=(mchw_amd mchw_perf)
	else # ARM
		if [ $bitw -eq 32 ]; then
			if [ "$ODROID" == "yes" ]; then
				compatible_modules=(odroid-xu perf)		
				module_names=(mchw_odroid_xu mchw_perf)
			else
				compatible_modules=(arm odroid-xu perf)
				module_names=(mchw_arm mchw_odroid_xu mchw_perf)			
			fi	
		else
			compatible_modules=(arm64 perf)	
			module_names=(mchw_arm64 mchw_perf)
		fi
	fi	
}


function do_build(){
	arch_bitwidth
	local bitw=$?
	figure_out_vendor
	local vendor_id=$?
	figure_out_kernel_HZ_setting
	local hz_setting=$?
	userspace_tools_only="$1"
	
	#echo $bitw $vendor_id $hz_setting
	vendor_str=`print_vendor_string ${vendor_id}`
	local separator="============================================"

	if [ "$vendor_str" == "Unknown" ]; then
		echo "Unsupported system"
		exit 1
	fi

	echo "**** System information ***"
	printf "Processor_vendor=${vendor_str}"
	printf "\n"
	echo "Kernel_HZ=${hz_setting}"
	echo "Processor_bitwidth=${bitw}"
	echo "***********************************************"

	if [ "${userspace_tools_only}" == "" ]; then
		## Build compatible kernel modules first
		echo "*************************************************"
		echo "*** Building supported PMCTrack kernel modules **"
		echo "*************************************************"
		update_compatible_modules $vendor_str $bitw

		## Go to module directories
		oldp=$PWD
		
		## Build the various supported modules
		i=0
		for module in ${compatible_modules[*]}
		do
			modname="${module_names[$i]}.ko"
			dir_module="${PMCTRACK_ROOT}/src/modules/pmcs/${module}"

			if [ ! -d ${dir_module} ]; then
				echo "Module directory not found in the source tree: ${dir_module}"
				exit 1
			fi

			## Go to module directory
			cd ${dir_module}

			## If the ko already exists (clean it)
			if [ -f ${modname} ]; then
				echo "Cleaning existing object files for ${modname} module "
				make clean
				echo "$separator"
			fi

			echo "Building kernel module $module...."
			echo "$separator"

			if ! make 2>&1 ; then
				printf "Error building ${modname}\nIncomplete build!!\n"
				exit 1
			fi
			echo "Done!!"
			echo "$separator"
			i=$(( $i + 1 ))
		done

		cd $oldp
	fi ## not userspace_tools_only

## Build libpmctrack
	builddir="${PMCTRACK_ROOT}/src/lib/libpmctrack"

	if [ ! -d ${builddir} ]; then
		echo "libpmctrack source directory not found in the source tree: ${builddir}"
		exit 1
	fi

	cd $builddir

	## If the library files already exist (clean it)
	if [ -f libpmctrack.so ] || [ -f libpmctrack.a ]; then
		echo "Cleaning up existing object files for libpmctrack"
		make clean
		echo "$separator"		
	fi

	echo "Building libpmctrack ...."
	echo "$separator"

	if ! make 2>&1 ; then
		printf 'Error building libpmctrack\nIncomplete build!!\n'
		exit 1
	fi
	echo "Done!!"
	echo "$separator"
## Build pmc-events and pmctrack

	for command in pmc-events pmctrack
	do
		builddir="${PMCTRACK_ROOT}/src/cmdtools/${command}"
		execfile="${PMCTRACK_ROOT}/bin/${command}"
		if [ ! -d ${builddir} ]; then
			echo "${command} source directory not found in the source tree: ${builddir}"
			exit 1
		fi

		cd $builddir

		## If the library files already exist (clean it)
		if [ -f ${execfile} ] ; then
			echo "Cleaning up existing object files for ${command}"
			make clean
			echo "$separator"
		fi

		echo "Building ${command} ...."
		echo "$separator"

		if ! make 2>&1 ; then
			printf 'Error building ${command}\nIncomplete build!!\n'
			exit 1
		fi
		echo "Done!!"
		echo "$separator"
	done

	echo "*** BUILD PROCESS COMPLETED SUCCESSFULLY ***"
}

function do_clean(){
	arch_bitwidth
	local bitw=$?
	figure_out_vendor
	local vendor_id=$?
	figure_out_kernel_HZ_setting
	local hz_setting=$?
	
	#echo $bitw $vendor_id $hz_setting
	vendor_str=`print_vendor_string ${vendor_id}`
	local separator="============================================"

	if [ "$vendor_str" == "Unknown" ]; then
		echo "Unsupported system"
		exit 1
	fi

	echo "**** System information ***"
	printf "Processor_vendor=${vendor_str}"
	printf "\n"
	echo "Kernel_HZ=${hz_setting}"
	echo "Processor_bitwidth=${bitw}"
	echo "***********************************************"
	printf "Press ENTER to start the cleaning process..."
	read

	## Clean compatible kernel modules first
	echo "*************************************************"
	update_compatible_modules $vendor_str $bitw

	## Go to module directories
	oldp=$PWD
	
	## Build the various supported modules
	i=0
	for module in ${compatible_modules[*]}
	do
		modname="${module_names[$i]}.ko"
        dir_module="${PMCTRACK_ROOT}/src/modules/pmcs/${module}"

		if [ ! -d ${dir_module} ]; then
			echo "Module directory not found in the source tree: ${dir_module}"
			exit 1
		fi

		## Go to module directory
		cd ${dir_module}

		## If the ko already exists (clean it)
		if [ -f ${modname} ]; then
			echo "Cleaning up ${modname}"
			make clean
		echo "Done!!"
		echo "$separator"
		i=$(( $i + 1 ))
		fi
	done

	cd $oldp

## Build libpmctrack
	builddir="${PMCTRACK_ROOT}/src/lib/libpmctrack"

	if [ ! -d ${builddir} ]; then
		echo "libpmctrack source directory not found in the source tree: ${builddir}"
		exit 1
	fi

	cd $builddir

	## If the library files already exist (clean it)
	if [ -f libpmctrack.so ] || [ -f libpmctrack.a ]; then
		echo "Cleaning up libpmctrack"
		make clean		
		echo "Done!!"
		echo "$separator"
	fi

## Build pmc-events and pmctrack

	for command in pmc-events pmctrack
	do
		builddir="${PMCTRACK_ROOT}/src/cmdtools/${command}"
		execfile="${PMCTRACK_ROOT}/bin/${command}"
		if [ ! -d ${builddir} ]; then
			echo "${command} source directory not found in the source tree: ${builddir}"
			exit 1
		fi

		cd $builddir

		## If the library files already exist (clean it)
		if [ -f ${execfile} ] ; then
			echo "Cleaning up ${command}"
			make clean
			echo "Done!!"
			echo "$separator"
		fi
	done

	echo "*** CLEANING PROCESS COMPLETED SUCCESSFULLY ***"
}


function do_build_phi(){
	local bitw=64
	local vendor_id=0
	local hz_setting=250
	local vendor_str="Intel"
	local separator="============================================"
	local mpss_root="$1"
	local kernel_tree="$2"

	## Not enough arguments?
	if [ "$kernel_tree" == "" ]; then
		echo "Usage: pmctrack-manager build-phi <mpss-root-dir> <kernel-sources-dir>" 
		exit 1			
	fi

	if [ ! -d "${mpss_root}" ]; then
		echo "MPSS root directory not found: ${mpss_root} " 
		exit 1			
	fi

	if [ ! -d "${kernel_tree}" ]; then
		echo "Linux kernel sources for the Xeon Phi not found: ${kernel_tree} " 
		exit 1			
	fi

	## Prepare environment...
	if [ ! -f ${mpss_root}/environment-setup-k1om-mpss-linux ]; then	
		echo "${mpss_root}/environment-setup-k1om-mpss-linux file not found" 
		exit 1	
	fi

	. ${mpss_root}/environment-setup-k1om-mpss-linux

	echo "**** Target system information ***"
	printf "Processor_vendor=${vendor_str}"
	printf "\n"
	echo "Kernel_HZ=${hz_setting}"
	echo "Processor_bitwidth=${bitw}"
	echo "Cross_compiler=k1om-mpss-linux-gcc"
	echo "***********************************************************************"
	printf "Press ENTER to start PMCTrack's cross-compilation for the Xeon Phi..."
	read
	echo "***********************************************************************"

	oldp=$PWD

	## Go to module directory
	module=xeon-phi
	modname="mchw_phy.ko"
	dir_module="${PMCTRACK_ROOT}/src/modules/pmcs/${module}"

	if [ ! -d ${dir_module} ]; then
		echo "Module directory not found in the source tree: ${dir_module}"
		exit 1
	fi

	## Go to module directory
	cd ${dir_module}

	## If the ko already exists (clean it)
	if [ -f ${modname} ]; then
		echo "Cleaning existing object files for ${modname} module "
		make clean
		echo "$separator"
	fi

	echo "Building kernel module $module...."
	echo "$separator"

	make KERNEL_TREE=${kernel_tree} 2>&1

	if [ $? -ne 0 ] ; then
		printf "Error building ${modname}\nIncomplete build!!\n"
		exit 1
	fi
	echo "Done!!"
	echo "$separator"

	cd $oldp

## Build libpmctrack
	builddir="${PMCTRACK_ROOT}/src/lib/libpmctrack"

	if [ ! -d ${builddir} ]; then
		echo "libpmctrack source directory not found in the source tree: ${builddir}"
		exit 1
	fi

	cd $builddir

	## If the library files already exist (clean it)
	if [ -f libpmctrack.so ] || [ -f libpmctrack.a ]; then
		echo "Cleaning up existing object files for libpmctrack"
		make clean
		echo "$separator"		
	fi

	echo "Building libpmctrack ...."
	echo "$separator"

	CC=k1om-mpss-linux-gcc make 2>&1

	if [ $? -ne 0 ] ; then
		printf 'Error building libpmctrack\nIncomplete build!!\n'
		exit 1
	fi
	echo "Done!!"
	echo "$separator"
## Build pmc-events and pmctrack

	for command in pmc-events pmctrack
	do
		builddir="${PMCTRACK_ROOT}/src/cmdtools/${command}"
		execfile="${PMCTRACK_ROOT}/bin/${command}"
		if [ ! -d ${builddir} ]; then
			echo "${command} source directory not found in the source tree: ${builddir}"
			exit 1
		fi

		cd $builddir

		## If the library files already exist (clean it)
		if [ -f ${execfile} ] ; then
			echo "Cleaning up existing object files for ${command}"
			make clean
			echo "$separator"
		fi

		echo "Building ${command} ...."
		echo "$separator"

		CC=k1om-mpss-linux-gcc make 2>&1

		if [ $? -ne 0 ] ; then
			printf 'Error building ${command}\nIncomplete build!!\n'
			exit 1
		fi
		echo "Done!!"
		echo "$separator"
	done

	echo "*** BUILD PROCESS COMPLETED SUCCESSFULLY ***"
}

function do_build_android_odroid(){
	local bitw=64
	local vendor_id=0
	local hz_setting=200
	local vendor_str="ARM"
	local separator="============================================"
	local cross_compile="$1"
	local kernel_tree="$2"

	## Not enough arguments?
	if [ "$kernel_tree" == "" ]; then
		echo "Usage: pmctrack-manager build-phi <cross_compile> <kernel-sources-dir>" 
		exit 1			
	fi

	if [ ! -d "${kernel_tree}" ]; then
		echo "Linux kernel sources for Android not found: ${kernel_tree} " 
		exit 1			
	fi

	echo "**** Target system information ***"
	printf "Processor_vendor=${vendor_str}"
	printf "\n"
	echo "Kernel_HZ=${hz_setting}"
	echo "Processor_bitwidth=${bitw}"
	echo "Cross_compiler=${cross_compile}gcc"
	echo "*******************************************************************************************"
	printf "Press ENTER to start PMCTrack's cross-compilation for Android on the Odroid-XU4 Board ..."
	read
	echo "*******************************************************************************************"

	oldp=$PWD
	
	## Go to module directory
	module=odroid-xu
	modname="mchw_odroid_xu.ko"
	dir_module="${PMCTRACK_ROOT}/src/modules/pmcs/${module}"

	if [ ! -d ${dir_module} ]; then
		echo "Module directory not found in the source tree: ${dir_module}"
		exit 1
	fi

	## Go to module directory
	cd ${dir_module}

	## If the ko already exists (clean it)
	if [ -f ${modname} ]; then
		echo "Cleaning existing object files for ${modname} module "
		make -f Makefile.android XCOMP=${cross_compile} KERNEL_TREE=${kernel_tree} clean
		echo "$separator"
	fi

	echo "Building kernel module $module...."
	echo "$separator"

	make -f Makefile.android XCOMP=${cross_compile} KERNEL_TREE=${kernel_tree} 2>&1

	if [ $? -ne 0 ] ; then
		printf "Error building ${modname}\nIncomplete build!!\n"
		exit 1
	fi
	echo "Done!!"
	echo "$separator"

	cd $oldp

## Build libpmctrack
	builddir="${PMCTRACK_ROOT}/src/lib/libpmctrack"

	if [ ! -d ${builddir} ]; then
		echo "libpmctrack source directory not found in the source tree: ${builddir}"
		exit 1
	fi

	cd $builddir

	## If the library files already exist (clean it)
	if [ -f libpmctrack.so ] || [ -f libpmctrack.a ]; then
		echo "Cleaning up existing object files for libpmctrack"
		make clean
		echo "$separator"		
	fi

	echo "Building libpmctrack ...."
	echo "$separator"

	CC=${cross_compile}gcc make 2>&1

	if [ $? -ne 0 ] ; then
		printf 'Error building libpmctrack\nIncomplete build!!\n'
		exit 1
	fi
	echo "Done!!"
	echo "$separator"
## Build pmc-events and pmctrack

	for command in pmc-events pmctrack
	do
		builddir="${PMCTRACK_ROOT}/src/cmdtools/${command}"
		execfile="${PMCTRACK_ROOT}/bin/${command}"
		if [ ! -d ${builddir} ]; then
			echo "${command} source directory not found in the source tree: ${builddir}"
			exit 1
		fi

		cd $builddir

		## If the library files already exist (clean it)
		if [ -f ${execfile} ] ; then
			echo "Cleaning up existing object files for ${command}"
			make clean
			echo "$separator"
		fi

		echo "Building ${command} ...."
		echo "$separator"

		CC=${cross_compile}gcc make 2>&1

		if [ $? -ne 0 ] ; then
			printf 'Error building ${command}\nIncomplete build!!\n'
			exit 1
		fi
		echo "Done!!"
		echo "$separator"
	done

	echo "*** BUILD PROCESS COMPLETED SUCCESSFULLY ***"
}


function do_load_module(){
	hint=${1:-""}
	arch_bitwidth
	local bitw=$?
	figure_out_vendor
	local vendor_id=$?
	vendor_str=`print_vendor_string ${vendor_id}`
	local separator="============================================"

	if [ "$vendor_str" == "Unknown" ]; then
		echo "Unsupported system"
		exit 1
	fi

	## Retrieve list of compatible modules
	update_compatible_modules $vendor_str $bitw

	nr_compatible_modules=${#compatible_modules[*]}

	if [ ${nr_compatible_modules} -eq 0 ]; then
		echo "No compatible modules found for this platform"
		exit 1
	elif [ ${nr_compatible_modules} -gt 1 ]; then

		if [ "$hint" != "" ] && [ "$hint" -le "${nr_compatible_modules}" ]; then
			selected_module=$(( $hint -1 ))
		else
			## Menu to choose module
			good_choice=0
			while  [ ${good_choice} -ne 1 ]; do
				echo "Several compatible modules found."
				i=0
				idx=1
				for module in ${compatible_modules[*]}
				do
					echo "${idx}) ${compatible_modules[$i]}"
					i=$(( $i + 1 ))
					idx=$(( $idx + 1 ))
				done
				echo "Please pick one [1-${nr_compatible_modules}]"

				read choice

				if [ $choice -ge 1 ] || [ $choice -le ${nr_compatible_modules} ]; then
					good_choice=1
					selected_module=$(( $choice -1 ))
				fi
			done
		fi
	else
		selected_module=0
	fi

	modname=${module_names[${selected_module}]}
	moddir=${compatible_modules[${selected_module}]}
	ko_name="${modname}.ko"
	
	is_loaded=`lsmod | grep ${modname} | wc -l`

	if [ ${is_loaded} -ge 1 ]; then
		good_choice=0
		while [ ${good_choice} -ne 1 ]; do
			echo "Module $modname is loaded. Do you wish to reload the module?[y/n]"
			read choice
			case $choice in
				y|Y) sudo rmmod $modname
					 good_choice=1
					 ;; 
				n|N) good_choice=1
					 exit 0
					;;
			esac
		done
	fi

	## Load module 

	dir_module="${PMCTRACK_ROOT}/src/modules/pmcs/${moddir}"
	cd ${dir_module}

	if [ ! -d ${dir_module} ]; then
		echo "Module directory not found in the source tree: ${dir_module}"
		exit 1
	fi
	
	## If the ko already exists (clean it)
	if [ ! -f ${ko_name} ]; then
		echo "Module file ${dir_module}/${ko_name} not found"
		echo "You must build PMCTrack first"
	fi

	echo "Loading kernel module ${modname} ..."
	sudo insmod ${ko_name}
	echo "$separator"		
}


function do_unload_module(){
	str=`lsmod | grep mchw_`
	is_loaded=`echo "$str" | wc -l`
	modname=`echo $str | cut -f 1 -d ' '`

	#Load
	if [ "$str" == "" ] || [ ${is_loaded} -ne 1 ]; then
		echo "No PMCTrack module found" 
		exit 1
	else
		good_choice=0
		while [ ${good_choice} -ne 1 ]; do
			echo "Module $modname is loaded. Do you really wish to unload the module?[y/n]"
			read choice
			case $choice in
				y|Y) sudo rmmod $modname
					 good_choice=1
					 ;; 
				n|N) good_choice=1
					 exit 0
					;;
			esac
		done
	fi

}


case $action in 
	version) do_version
			 exit 0
			 ;;
	build)	do_build | tee build.log
			exit 0
			;;
	clean)	do_clean
			exit 0
			;;
	build-phi) do_build_phi $2 $3
			   exit 0
			;;					 
	build-user-tools) do_build 1 | tee build_user.log
			exit 0
			;;
	build-android-odroid*) do_build_android_odroid $2 $3
			exit 0	
			;;
	load-module) do_load_module $2
			exit 0
			;;
	remove-module) do_unload_module
			exit 0
			;;
	*)	echo "Unrecognized action :: $action" >&2
		exit 1
		;;		 
esac 

